import asyncio
from datetime import date, timedelta
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import Column, Integer, Float, Date, BigInteger, String, select, func
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import declarative_base, sessionmaker

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://primer:primer@db:5432/economoney_db")
DAILY_LIMIT = 2000

Base = declarative_base()
engine = create_async_engine(DATABASE_URL, echo=False)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# --- –ú–æ–¥–µ–ª–∏ ---
class Expense(Base):
    __tablename__ = "expenses"
    id = Column(Integer, primary_key=True)
    user_id = Column(BigInteger, nullable=False)
    amount = Column(Float, nullable=False)
    date = Column(Date, nullable=False, default=date.today)
    category = Column(String, nullable=True)


class Balance(Base):
    __tablename__ = "balances"
    id = Column(Integer, primary_key=True)
    user_id = Column(BigInteger, nullable=False)
    date = Column(Date, nullable=False)
    balance = Column(Float, nullable=False)


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìÖ –î–µ–Ω—å", callback_data="stats_day"),
        InlineKeyboardButton(text="üìà –ù–µ–¥–µ–ª—è", callback_data="stats_week"),
        InlineKeyboardButton(text="üìä –ú–µ—Å—è—Ü", callback_data="stats_month")
    ],
    [
        InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="add_budget")
    ]
])

categories_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="cat_–ü—Ä–æ–¥—É–∫—Ç—ã"),
        InlineKeyboardButton(text="üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="cat_–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")
    ],
    [
        InlineKeyboardButton(text="üçî –î–æ—Å—Ç–∞–≤–∫–∞/–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", callback_data="cat_–î–æ—Å—Ç–∞–≤–∫–∞/–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"),
        InlineKeyboardButton(text="üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="cat_–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
    ],
    [
        InlineKeyboardButton(text="üßæ –ü—Ä–æ—á–µ–µ", callback_data="cat_–ü—Ä–æ—á–µ–µ")
    ]
])

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
pending_expenses = {}  # {user_id: amount}
awaiting_budget_add = set()


# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º ---
async def get_balance(session: AsyncSession, user_id: int) -> float:
    today = date.today()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    result = await session.execute(select(Balance).filter_by(user_id=user_id, date=today))
    balance_today = result.scalars().first()
    if balance_today:
        return balance_today.balance

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(Balance)
        .filter(Balance.user_id == user_id)
        .order_by(Balance.date.desc())
        .limit(1)
    )
    last_balance = result.scalars().first()

    if not last_balance:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å —Å DAILY_LIMIT
        new_entry = Balance(user_id=user_id, date=today, balance=DAILY_LIMIT)
        session.add(new_entry)
        await session.commit()
        return DAILY_LIMIT

    # –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    days_passed = (today - last_balance.date).days

    if days_passed <= 0:
        # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å
        return last_balance.balance

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å
    new_balance_value = last_balance.balance + (days_passed * DAILY_LIMIT)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    new_entry = Balance(user_id=user_id, date=today, balance=new_balance_value)
    session.add(new_entry)
    await session.commit()

    return new_balance_value


async def update_balance(session: AsyncSession, user_id: int, new_balance: float):
    today = date.today()
    await session.execute(
        Balance.__table__.update()
        .where(Balance.user_id == user_id, Balance.date == today)
        .values(balance=new_balance)
    )
    await session.commit()


async def add_expense(session: AsyncSession, user_id: int, amount: float, category: str):
    today = date.today()
    balance = await get_balance(session, user_id)
    new_balance = balance - amount

    session.add(Expense(user_id=user_id, amount=amount, date=today, category=category))
    await update_balance(session, user_id, new_balance)
    return new_balance


async def add_to_budget(session: AsyncSession, user_id: int, amount: float):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    +X ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç X —Ä—É–±–ª–µ–π
    -X ‚Üí —É–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞ X —Ä—É–±–ª–µ–π
    """
    current_balance = await get_balance(session, user_id)
    new_balance = current_balance + amount  # amount –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
    await update_balance(session, user_id, new_balance)
    await session.commit()
    return new_balance


async def get_stats(session: AsyncSession, user_id: int, period: str):
    today = date.today()
    if period == "day":
        start_date = today
    elif period == "week":
        start_date = today - timedelta(days=7)
    elif period == "month":
        start_date = today.replace(day=1)
    else:
        start_date = today

    query = (
        select(Expense.category, func.sum(Expense.amount))
        .filter(Expense.user_id == user_id, Expense.date >= start_date)
        .group_by(Expense.category)
    )

    result = await session.execute(query)
    return result.all()


async def get_weekly_stats(session: AsyncSession, user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∏ –±–∞–ª–∞–Ω—Å –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."""
    today = date.today()
    start_date = today - timedelta(days=6)

    # --- –†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
    query = (
        select(Expense.date, Expense.category, func.sum(Expense.amount))
        .filter(Expense.user_id == user_id, Expense.date >= start_date)
        .group_by(Expense.date, Expense.category)
        .order_by(Expense.date)
    )
    result = await session.execute(query)
    rows = result.all()

    daily_stats = {}
    for d, cat, amount in rows:
        if d not in daily_stats:
            daily_stats[d] = {}
        daily_stats[d][cat or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"] = amount

    # --- –ë–∞–ª–∞–Ω—Å—ã –∑–∞ —ç—Ç–∏ –∂–µ –¥–Ω–∏ ---
    balance_query = (
        select(Balance.date, Balance.balance)
        .filter(Balance.user_id == user_id, Balance.date >= start_date)
        .order_by(Balance.date)
    )
    balances_result = await session.execute(balance_query)
    balances = {d: b for d, b in balances_result.all()}

    total_sum = sum(sum(cats.values()) for cats in daily_stats.values())

    return daily_stats, balances, total_sum


# --- Telegram –ª–æ–≥–∏–∫–∞ ---
bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(F.text == "/start")
async def start_cmd(message: Message):
    async with async_session() as session:
        current_balance = await get_balance(session, message.from_user.id)

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã.\n"
        f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è {current_balance:.2f} ‚ÇΩ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ—Ç—Ä–∞—Ç–∏–ª, –∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
        reply_markup=menu_kb
    )


@dp.message(F.text.regexp(r"^-?\d+(\.\d+)?$"))
async def handle_amount(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
    if user_id in awaiting_budget_add:
        amount = float(message.text)
        async with async_session() as session:
            new_balance = await add_to_budget(session, user_id, amount)
        awaiting_budget_add.remove(user_id)
        sign_text = "–ø–æ–ø–æ–ª–Ω–µ–Ω" if amount >= 0 else "—É–º–µ–Ω—å—à–µ–Ω"
        await message.answer(
            f"‚úÖ –ë—é–¥–∂–µ—Ç {sign_text} –Ω–∞ {abs(amount):.2f} ‚ÇΩ.\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} ‚ÇΩ",
            reply_markup=menu_kb
        )
        return

    # –û–±—ã—á–Ω–∞—è —Ç—Ä–∞—Ç–∞
    pending_expenses[user_id] = float(message.text)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb)


@dp.callback_query(F.data.startswith("cat_"))
async def handle_category(call: CallbackQuery):
    user_id = call.from_user.id
    category = call.data.split("_", 1)[1]
    amount = pending_expenses.pop(user_id, None)

    if amount is None:
        await call.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π —Å—É–º–º—ã üòÖ", show_alert=True)
        return

    async with async_session() as session:
        new_balance = await add_expense(session, user_id, amount, category)

    await call.message.answer(
        f"üí∏ –ü–æ—Ç—Ä–∞—Ç–∏–ª {amount:.2f} ‚ÇΩ –Ω–∞ {category}.\n"
        f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {new_balance:.2f} ‚ÇΩ",
        reply_markup=menu_kb
    )
    await call.answer()


@dp.callback_query(F.data == "add_budget")
async def handle_add_budget(call: CallbackQuery):
    awaiting_budget_add.add(call.from_user.id)
    await call.message.answer("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±—é–¥–∂–µ—Ç:")
    await call.answer()


@dp.callback_query(F.data.startswith("stats_"))
async def stats_callback(call: CallbackQuery):
    period = call.data.split("_")[1]
    names = {"day": "–¥–µ–Ω—å", "week": "–Ω–µ–¥–µ–ª—é", "month": "–º–µ—Å—è—Ü"}

    async with async_session() as session:
        # ---- üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é ----
        if period == "week":
            daily_stats, balances, total_sum = await get_weekly_stats(session, call.from_user.id)
            if not daily_stats and not balances:
                await call.message.answer("üìä –ó–∞ –Ω–µ–¥–µ–ª—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=menu_kb)
                await call.answer()
                return

            lines = [f"üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n"]
            sorted_days = sorted(set(daily_stats.keys()) | set(balances.keys()))

            for d in sorted_days:
                cats = daily_stats.get(d, {})
                lines.append(f"üìÖ {d.strftime('%d.%m.%Y')}:")
                if cats:
                    for cat, amount in cats.items():
                        lines.append(f"   ‚Ä¢ {cat}: {amount:.2f} ‚ÇΩ")
                else:
                    lines.append("   ‚Ä¢ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤")
                day_total = sum(cats.values()) if cats else 0
                lines.append(f"   üíµ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –¥–µ–Ω—å: {day_total:.2f} ‚ÇΩ")

                if d in balances:
                    lines.append(f"   üí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è: {balances[d]:.2f} ‚ÇΩ\n")
                else:
                    lines.append("   üí∞ –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω\n")

            lines.append(f"üíµ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {total_sum:.2f} ‚ÇΩ")
            await call.message.answer("\n".join(lines), reply_markup=menu_kb)
            await call.answer()
            return

        # ---- üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å / –º–µ—Å—è—Ü ----
        stats = await get_stats(session, call.from_user.id, period)
        lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {names[period]}:\n"]
        total = 0
        for category, amount in stats:
            lines.append(f"‚Ä¢ {category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'} ‚Äî {amount:.2f} ‚ÇΩ")
            total += amount
        lines.append(f"\nüíµ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total:.2f} ‚ÇΩ")

        # üîπ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–Ω—å
        if period == "day":
            today = date.today()
            balance_query = await session.execute(
                select(Balance.balance).filter_by(user_id=call.from_user.id, date=today)
            )
            balance_today = balance_query.scalar()

            # üí° –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä—É—á–Ω—É—é
            if balance_today is None:
                # 1. –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å
                last_balance_query = await session.execute(
                    select(Balance.date, Balance.balance)
                    .filter(Balance.user_id == call.from_user.id)
                    .order_by(Balance.date.desc())
                    .limit(1)
                )
                last_balance_row = last_balance_query.first()

                if last_balance_row:
                    last_date, last_balance = last_balance_row
                    days_passed = (today - last_date).days
                    # 2. –°–∫–æ–ª—å–∫–æ –ª–∏–º–∏—Ç–∞ –¥–æ–±–∞–≤–∏–ª–æ—Å—å —Å —Ç–µ—Ö –ø–æ—Ä
                    restored_balance = last_balance + days_passed * DAILY_LIMIT
                else:
                    restored_balance = DAILY_LIMIT  # –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π

                # 3. –í—ã—á–∏—Ç–∞–µ–º —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                expenses_query = await session.execute(
                    select(func.sum(Expense.amount))
                    .filter(Expense.user_id == call.from_user.id, Expense.date == today)
                )
                spent_today = expenses_query.scalar() or 0
                balance_today = restored_balance - spent_today

            lines.append(f"üí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è: {balance_today:.2f} ‚ÇΩ")

        await call.message.answer("\n".join(lines), reply_markup=menu_kb)
        await call.answer()


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())